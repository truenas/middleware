"""Recreate vm tables

Revision ID: b4f95cb7928e
Revises: fb5567f445b8
Create Date: 2025-06-23 21:14:00.000000+00:00

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.engine.reflection import Inspector


# revision identifiers, used by Alembic.
revision = 'b4f95cb7928e'
down_revision = 'fb5567f445b8'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)
    tables = inspector.get_table_names()
    
    # Create vm_vm table if it doesn't exist
    if 'vm_vm' not in tables:
        op.create_table('vm_vm',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('name', sa.String(150), nullable=False),
            sa.Column('description', sa.String(250), nullable=False),
            sa.Column('vcpus', sa.Integer(), nullable=False),
            sa.Column('memory', sa.Integer(), nullable=False),
            sa.Column('min_memory', sa.Integer(), nullable=True),
            sa.Column('autostart', sa.Boolean(), nullable=False),
            sa.Column('time', sa.String(5), nullable=False),
            sa.Column('bootloader', sa.String(50), nullable=False),
            sa.Column('cores', sa.Integer(), nullable=False),
            sa.Column('threads', sa.Integer(), nullable=False),
            sa.Column('hyperv_enlightenments', sa.Boolean(), server_default='0', nullable=False),
            sa.Column('shutdown_timeout', sa.Integer(), nullable=False),
            sa.Column('cpu_mode', sa.Text(), server_default='CUSTOM', nullable=False),
            sa.Column('cpu_model', sa.Text(), nullable=True),
            sa.Column('cpuset', sa.Text(), nullable=True),
            sa.Column('nodeset', sa.Text(), nullable=True),
            sa.Column('pin_vcpus', sa.Boolean(), server_default='0', nullable=False),
            sa.Column('hide_from_msr', sa.Boolean(), server_default='0', nullable=False),
            sa.Column('suspend_on_snapshot', sa.Boolean(), server_default='0', nullable=False),
            sa.Column('ensure_display_device', sa.Boolean(), server_default='1', nullable=False),
            sa.Column('arch_type', sa.String(255), nullable=True),
            sa.Column('machine_type', sa.String(255), nullable=True),
            sa.Column('uuid', sa.String(255), server_default='', nullable=False),
            sa.Column('command_line_args', sa.Text(), server_default='', nullable=False),
            sa.Column('bootloader_ovmf', sa.String(1024), server_default='OVMF_CODE.fd', nullable=False),
            sa.Column('trusted_platform_module', sa.Boolean(), server_default='0', nullable=False),
            sa.Column('enable_cpu_topology_extension', sa.Boolean(), server_default='0', nullable=False),
            sa.PrimaryKeyConstraint('id', name=op.f('pk_vm_vm')),
            sqlite_autoincrement=True,
        )
    
    # Create vm_device table if it doesn't exist
    if 'vm_device' not in tables:
        op.create_table('vm_device',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('attributes', sa.TEXT(), nullable=False),
            sa.Column('vm_id', sa.Integer(), nullable=False),
            sa.Column('order', sa.Integer(), nullable=True),
            sa.ForeignKeyConstraint(['vm_id'], ['vm_vm.id'], name=op.f('fk_vm_device_vm_id_vm_vm')),
            sa.PrimaryKeyConstraint('id', name=op.f('pk_vm_device')),
            sqlite_autoincrement=True
        )
        with op.batch_alter_table('vm_device') as batch_op:
            batch_op.create_index(batch_op.f('ix_vm_device_vm_id'), ['vm_id'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop tables in reverse order due to foreign key constraints
    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)
    tables = inspector.get_table_names()
    
    if 'vm_device' in tables:
        with op.batch_alter_table('vm_device') as batch_op:
            batch_op.drop_index(batch_op.f('ix_vm_device_vm_id'))
        op.drop_table('vm_device')
    
    if 'vm_vm' in tables:
        op.drop_table('vm_vm')
    # ### end Alembic commands ###