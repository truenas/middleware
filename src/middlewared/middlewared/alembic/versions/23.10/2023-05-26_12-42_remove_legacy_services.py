"""Remove DynDNS, OpenVPN, rsyncd, WebDAV

Revision ID: a63a2c20632a
Revises: cf91fa3d0696
Create Date: 2023-05-26 12:42:31.731606+00:00

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import text


# revision identifiers, used by Alembic.
revision = 'a63a2c20632a'
down_revision = 'cf91fa3d0696'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('sharing_webdav_share')
    op.drop_table('services_openvpnserver')
    op.drop_table('services_openvpnclient')
    op.drop_table('services_rsyncd')
    op.drop_table('services_rsyncmod')
    op.drop_table('services_dynamicdns')
    op.drop_table('services_webdav')
    op.execute(text("DELETE FROM services_services WHERE srv_service IN ('dynamicdns', 'openvpn_client', 'openvpn_server', 'rsync', 'webdav')"))
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('services_webdav',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('webdav_protocol', sa.VARCHAR(length=120), nullable=False),
    sa.Column('webdav_tcpport', sa.INTEGER(), nullable=False),
    sa.Column('webdav_tcpportssl', sa.INTEGER(), nullable=False),
    sa.Column('webdav_password', sa.VARCHAR(length=120), nullable=False),
    sa.Column('webdav_htauth', sa.VARCHAR(length=120), nullable=False),
    sa.Column('webdav_certssl_id', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['webdav_certssl_id'], ['system_certificate.id'], name='fk_services_webdav_webdav_certssl_id_system_certificate'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('services_dynamicdns',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('ddns_provider', sa.VARCHAR(length=120), nullable=False),
    sa.Column('ddns_domain', sa.VARCHAR(length=120), nullable=False),
    sa.Column('ddns_username', sa.VARCHAR(length=120), nullable=False),
    sa.Column('ddns_password', sa.VARCHAR(length=120), nullable=False),
    sa.Column('ddns_checkip_ssl', sa.BOOLEAN(), nullable=False),
    sa.Column('ddns_checkip_server', sa.VARCHAR(length=150), nullable=False),
    sa.Column('ddns_checkip_path', sa.VARCHAR(length=150), nullable=False),
    sa.Column('ddns_ssl', sa.BOOLEAN(), nullable=False),
    sa.Column('ddns_custom_ddns_server', sa.VARCHAR(length=150), nullable=False),
    sa.Column('ddns_custom_ddns_path', sa.VARCHAR(length=150), nullable=False),
    sa.Column('ddns_period', sa.INTEGER(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('services_rsyncmod',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('rsyncmod_name', sa.VARCHAR(length=120), nullable=False),
    sa.Column('rsyncmod_comment', sa.VARCHAR(length=120), nullable=False),
    sa.Column('rsyncmod_path', sa.VARCHAR(length=255), nullable=False),
    sa.Column('rsyncmod_mode', sa.VARCHAR(length=120), nullable=False),
    sa.Column('rsyncmod_maxconn', sa.INTEGER(), nullable=False),
    sa.Column('rsyncmod_user', sa.VARCHAR(length=120), nullable=False),
    sa.Column('rsyncmod_group', sa.VARCHAR(length=120), nullable=False),
    sa.Column('rsyncmod_hostsallow', sa.TEXT(), nullable=False),
    sa.Column('rsyncmod_hostsdeny', sa.TEXT(), nullable=False),
    sa.Column('rsyncmod_auxiliary', sa.TEXT(), nullable=False),
    sa.Column('rsyncmod_enabled', sa.BOOLEAN(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('services_rsyncd',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('rsyncd_port', sa.INTEGER(), nullable=False),
    sa.Column('rsyncd_auxiliary', sa.TEXT(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('services_openvpnclient',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('port', sa.INTEGER(), nullable=False),
    sa.Column('protocol', sa.VARCHAR(length=4), nullable=False),
    sa.Column('device_type', sa.VARCHAR(length=4), nullable=False),
    sa.Column('nobind', sa.BOOLEAN(), nullable=False),
    sa.Column('authentication_algorithm', sa.VARCHAR(length=32), nullable=True),
    sa.Column('tls_crypt_auth', sa.TEXT(), nullable=True),
    sa.Column('cipher', sa.VARCHAR(length=32), nullable=True),
    sa.Column('compression', sa.VARCHAR(length=32), nullable=True),
    sa.Column('additional_parameters', sa.TEXT(), nullable=False),
    sa.Column('client_certificate_id', sa.INTEGER(), nullable=True),
    sa.Column('root_ca_id', sa.INTEGER(), nullable=True),
    sa.Column('remote', sa.VARCHAR(length=120), nullable=False),
    sa.ForeignKeyConstraint(['client_certificate_id'], ['system_certificate.id'], name='fk_services_openvpnclient_client_certificate_id_system_certificate'),
    sa.ForeignKeyConstraint(['root_ca_id'], ['system_certificateauthority.id'], name='fk_services_openvpnclient_root_ca_id_system_certificateauthority'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('services_openvpnclient', schema=None) as batch_op:
        batch_op.create_index('ix_services_openvpnclient_root_ca_id', ['root_ca_id'], unique=False)
        batch_op.create_index('ix_services_openvpnclient_client_certificate_id', ['client_certificate_id'], unique=False)

    op.create_table('services_openvpnserver',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('port', sa.INTEGER(), nullable=False),
    sa.Column('protocol', sa.VARCHAR(length=4), nullable=False),
    sa.Column('device_type', sa.VARCHAR(length=4), nullable=False),
    sa.Column('authentication_algorithm', sa.VARCHAR(length=32), nullable=True),
    sa.Column('tls_crypt_auth', sa.TEXT(), nullable=True),
    sa.Column('cipher', sa.VARCHAR(length=32), nullable=True),
    sa.Column('compression', sa.VARCHAR(length=32), nullable=True),
    sa.Column('additional_parameters', sa.TEXT(), nullable=False),
    sa.Column('server_certificate_id', sa.INTEGER(), nullable=True),
    sa.Column('root_ca_id', sa.INTEGER(), nullable=True),
    sa.Column('server', sa.VARCHAR(length=45), nullable=False),
    sa.Column('topology', sa.VARCHAR(length=16), nullable=True),
    sa.Column('netmask', sa.INTEGER(), nullable=False),
    sa.ForeignKeyConstraint(['root_ca_id'], ['system_certificateauthority.id'], name='fk_services_openvpnserver_root_ca_id_system_certificateauthority'),
    sa.ForeignKeyConstraint(['server_certificate_id'], ['system_certificate.id'], name='fk_services_openvpnserver_server_certificate_id_system_certificate'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('services_openvpnserver', schema=None) as batch_op:
        batch_op.create_index('ix_services_openvpnserver_server_certificate_id', ['server_certificate_id'], unique=False)
        batch_op.create_index('ix_services_openvpnserver_root_ca_id', ['root_ca_id'], unique=False)

    op.create_table('sharing_webdav_share',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('webdav_name', sa.VARCHAR(length=120), nullable=False),
    sa.Column('webdav_comment', sa.VARCHAR(length=120), nullable=False),
    sa.Column('webdav_path', sa.VARCHAR(length=255), nullable=False),
    sa.Column('webdav_ro', sa.BOOLEAN(), nullable=False),
    sa.Column('webdav_perm', sa.BOOLEAN(), nullable=False),
    sa.Column('webdav_enabled', sa.BOOLEAN(), server_default=sa.text("'1'"), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###
