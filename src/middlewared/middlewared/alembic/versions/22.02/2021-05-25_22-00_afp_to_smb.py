"""Convert AFP shares to SMB shares

Revision ID: 5f4cab067712
Revises: bd637e18fb0b
Create Date: 2021-05-25 19:00:34.776266+00:00

"""
import json
import textwrap

from alembic import op
import sqlalchemy as sa
from sqlalchemy import text


# revision identifiers, used by Alembic.
revision = '5f4cab067712'
down_revision = 'bd637e18fb0b'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('sharing_cifs_share', schema=None) as batch_op:
        batch_op.add_column(sa.Column('cifs_timemachine_quota', sa.Integer(), nullable=True))

    op.execute(text("UPDATE sharing_cifs_share SET cifs_timemachine_quota = 0"))

    with op.batch_alter_table('sharing_cifs_share', schema=None) as batch_op:
        batch_op.alter_column('cifs_timemachine_quota', existing_type=sa.INTEGER(), nullable=False)

    with op.batch_alter_table('sharing_cifs_share', schema=None) as batch_op:
        batch_op.add_column(sa.Column('cifs_afp', sa.Boolean(), nullable=True))

    op.execute(text("UPDATE sharing_cifs_share SET cifs_afp = 0"))
    op.execute(text("""
        UPDATE sharing_cifs_share SET cifs_purpose = 'NO_PRESET', cifs_afp = 1 WHERE cifs_purpose = 'MULTI_PROTOCOL_AFP'
    """))

    with op.batch_alter_table('sharing_cifs_share', schema=None) as batch_op:
        batch_op.alter_column('cifs_afp', existing_type=sa.BOOLEAN(), nullable=False)

    conn = op.get_bind()
    has_cifs_home = bool(conn.execute(text("SELECT * FROM sharing_cifs_share WHERE cifs_home = 1")))
    disable_acl_if_trivial = []
    for share in conn.execute(text("SELECT * FROM sharing_afp_share")).mappings():
        cifs_auxsmbconf = []
        share_disable_acl_if_trivial = False
        if share["afp_allow"].strip():
            cifs_auxsmbconf.append(f"valid users = {share['afp_allow'].strip()}")
            share_disable_acl_if_trivial = True
        if share["afp_deny"].strip():
            cifs_auxsmbconf.append(f"invalid users = {share['afp_deny'].strip()}")
            share_disable_acl_if_trivial = True
        if share["afp_ro"].strip():
            cifs_auxsmbconf.append(f"rolist = {share['afp_ro'].strip()}")
            share_disable_acl_if_trivial = True
        if share["afp_rw"].strip():
            cifs_auxsmbconf.append(f"rwlist = {share['afp_rw'].strip()}")
            share_disable_acl_if_trivial = True
        umask_inv = "%o" % (~int(share["afp_umask"], 8) & 0o777)
        cifs_auxsmbconf.append(f"create mask = 0{umask_inv}")
        cifs_auxsmbconf.append(f"directory mode = 0{umask_inv}")
        cifs_auxsmbconf.append(f"force create mode = 0{share['afp_fperm']}")
        cifs_auxsmbconf.append(f"force directory mode = 0{share['afp_dperm']}")
        if share["afp_auxparams"].strip():
            cifs_auxsmbconf.append(textwrap.indent(f"\nNetatalk Auxiliary Parameters:\n\n{share['afp_auxparams']}", "; "))

        cifs_path_suffix = ""
        cifs_home = False
        if share["afp_home"]:
            if not has_cifs_home:
                cifs_home = True
            else:
                cifs_path_suffix = "%U"

            has_cifs_home = True

        cifs_share = {
            "cifs_purpose": "NO_PRESET",
            "cifs_path": share["afp_path"],
            "cifs_path_suffix": cifs_path_suffix,
            "cifs_home": cifs_home,
            "cifs_name": f"AFP_{share['afp_name']}",
            "cifs_comment": share["afp_comment"],
            "cifs_ro": False,
            "cifs_browsable": True,
            "cifs_recyclebin": False,
            "cifs_guestok": False,
            "cifs_hostsallow": share["afp_hostsallow"],
            "cifs_hostsdeny": share["afp_hostsdeny"],
            "cifs_auxsmbconf": "\n".join(cifs_auxsmbconf),
            "cifs_aapl_name_mangling": True,
            "cifs_abe": False,
            "cifs_acl": True,
            "cifs_durablehandle": False,
            "cifs_streams": True,
            "cifs_timemachine": share["afp_timemachine"],
            "cifs_vuid": share["afp_vuid"],
            "cifs_shadowcopy": True,
            "cifs_fsrvp": False,
            "cifs_enabled": share["afp_enabled"],
            "cifs_share_acl": "",
            "cifs_cluster_volname": "",
            "cifs_timemachine_quota": share["afp_timemachine_quota"],
            "cifs_afp": True,
        }

        column_names = ','.join(cifs_share.keys())
        placeholders = ','.join(f':{key}' for key in cifs_share.keys())
        conn.execute(
            text(f"INSERT INTO sharing_cifs_share ({column_names}) VALUES ({placeholders})"),
            cifs_share
        )

        share_id = conn.execute(text("SELECT last_insert_rowid()")).fetchall()[0][0]
        if share_disable_acl_if_trivial:
            disable_acl_if_trivial.append(share_id)

        conn.execute(text("UPDATE services_cifs SET cifs_srv_aapl_extensions = 1"))

    if disable_acl_if_trivial:
        conn.execute(text("INSERT INTO system_keyvalue (\"key\", value) VALUES (:key, :value)"),
                     {"key": "smb_disable_acl_if_trivial", "value": json.dumps(disable_acl_if_trivial)})

    op.drop_table('services_afp')
    op.drop_table('sharing_afp_share')
    op.execute(text("DELETE FROM services_services WHERE srv_service = 'afp'"))
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('sharing_cifs_share', schema=None) as batch_op:
        batch_op.drop_column('cifs_timemachine_quota')

    op.create_table('sharing_afp_share',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('afp_path', sa.VARCHAR(length=255), nullable=False),
    sa.Column('afp_name', sa.VARCHAR(length=120), nullable=False),
    sa.Column('afp_comment', sa.VARCHAR(length=120), nullable=False),
    sa.Column('afp_allow', sa.VARCHAR(length=120), nullable=False),
    sa.Column('afp_deny', sa.VARCHAR(length=120), nullable=False),
    sa.Column('afp_ro', sa.VARCHAR(length=120), nullable=False),
    sa.Column('afp_rw', sa.VARCHAR(length=120), nullable=False),
    sa.Column('afp_timemachine', sa.BOOLEAN(), nullable=False),
    sa.Column('afp_nodev', sa.BOOLEAN(), nullable=False),
    sa.Column('afp_nostat', sa.BOOLEAN(), nullable=False),
    sa.Column('afp_upriv', sa.BOOLEAN(), nullable=False),
    sa.Column('afp_fperm', sa.VARCHAR(length=3), nullable=False),
    sa.Column('afp_dperm', sa.VARCHAR(length=3), nullable=False),
    sa.Column('afp_umask', sa.VARCHAR(length=3), nullable=False),
    sa.Column('afp_hostsallow', sa.VARCHAR(length=120), nullable=False),
    sa.Column('afp_hostsdeny', sa.VARCHAR(length=120), nullable=False),
    sa.Column('afp_auxparams', sa.TEXT(), nullable=False),
    sa.Column('afp_timemachine_quota', sa.INTEGER(), nullable=False),
    sa.Column('afp_home', sa.BOOLEAN(), nullable=False),
    sa.Column('afp_enabled', sa.BOOLEAN(), nullable=False),
    sa.Column('afp_vuid', sa.VARCHAR(length=36), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('services_afp',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('afp_srv_guest', sa.BOOLEAN(), nullable=False),
    sa.Column('afp_srv_guest_user', sa.VARCHAR(length=120), nullable=False),
    sa.Column('afp_srv_bindip', sa.VARCHAR(length=255), nullable=False),
    sa.Column('afp_srv_connections_limit', sa.INTEGER(), nullable=False),
    sa.Column('afp_srv_dbpath', sa.VARCHAR(length=255), nullable=True),
    sa.Column('afp_srv_global_aux', sa.TEXT(), nullable=False),
    sa.Column('afp_srv_map_acls', sa.VARCHAR(length=120), nullable=False),
    sa.Column('afp_srv_chmod_request', sa.VARCHAR(length=120), nullable=False),
    sa.Column('afp_srv_loglevel', sa.VARCHAR(length=120), nullable=False),
    sa.CheckConstraint('afp_srv_guest IN (0, 1)'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###
