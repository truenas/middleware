"""Replace nfs_paths with nfs_path

Revision ID: 696b3d876084
Revises: 0b02e21a1a10
Create Date: 2022-03-23 16:23:22.667861+00:00

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import text
import json


# revision identifiers, used by Alembic.
revision = '696b3d876084'
down_revision = '0b02e21a1a10'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('sharing_nfs_share', schema=None) as batch_op:
        batch_op.add_column(sa.Column('nfs_path', sa.TEXT(), nullable=True))

    conn = op.get_bind()
    nfs_shares = conn.execute(text("SELECT * FROM sharing_nfs_share")).mappings().all()
    for entry in nfs_shares:
        # use existing entry for first path and add new entries for subsequent paths
        _id = entry.pop("id")
        try:
            paths = json.loads(entry['nfs_paths'])
        except Exception:
            paths = ["/var/empty"]

        try:
            first_path = paths.pop(0)
        except IndexError:
            first_path = "/var/empty"

        conn.execute(text('UPDATE sharing_nfs_share SET nfs_path = :path WHERE id = :id'), {'path': first_path, 'id': _id})
        if not paths:
            continue

        for path in paths:
            if not path:
                continue

            entry['nfs_path'] = path
            placeholders = ', '.join([f':{k}' for k in entry.keys()])
            conn.execute(
                text(f"INSERT INTO sharing_nfs_share ({','.join(entry.keys())}) VALUES ({placeholders})"),
                entry,
            )

    with op.batch_alter_table('sharing_nfs_share', schema=None) as batch_op:
        batch_op.alter_column('nfs_path', existing_type=sa.TEXT(), nullable=False)

    with op.batch_alter_table('sharing_nfs_share', schema=None) as batch_op:
        batch_op.drop_column('nfs_paths')
        batch_op.drop_column('nfs_alldirs')
